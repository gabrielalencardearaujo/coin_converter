(()=>{var n={122:(n,t,e)=>{"use strict";e.d(t,{Z:()=>c});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);"]),i.push([n.id,":root{\n  --font-family: 'Ubuntu', sans-serif;\n  --color-primary: #343541;\n  --color-secondary: #202123;\n  --color-text: #ECECF1;\n}\n\n*{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  color: var(--color-text);\n}\n\nbody, html{\n  font-family: var(--font-family);\n  background-color: var(--color-primary);\n}\n\n/* HEADER */\nheader{\n  text-align: center;\n  margin-top: 100px;\n}\n\nh1{\n  color: var(--color-text);\n  letter-spacing: 0.03em;\n  margin: 20px 0px;\n}\n\n/* CONTEUDO */\n\n.container{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 20px auto;\n  max-width: 960px;\n  height: 300px;\n  background-color: var(--color-secondary);\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.4);\n}\n\n.input_Value_Coin, \n.input_show_Coin{\n  font-size: 1.4em;\n  height: 2em;\n  width: 80%;\n  caret-color: currentColor;\n  outline: 1px solid currentColor;\n  background-color: var(--color-secondary);\n  text-align: center;\n  border: none;\n}\n\n.input_Value_Coin:focus {\n  outline: 2px solid currentColor;\n  border: none;\n}\n\n.input_show_Coin{\n  outline: none;\n  background-color: var(--color-secondary);\n  text-align: center;\n  color: currentColor;\n  border: none;\n  border: 1px solid currentColor;\n}\n\n.firstInput{\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin: 10px 0 40px 0;\n}\n\nimg {\n  margin: 0 5%;\n}\n\noption, #fromCoin, #toCoin{\n  color: currentColor;\n  height: 2.7em;\n  text-align: center;\n  background-color: var(--color-primary);\n  font-size: 1em;\n  min-width: 80px;\n  cursor: pointer;\n}\n\n.btn{\n  width: 120px;\n  height: 40px;\n  font-size: 1.4em;\n  letter-spacing: 0.1em;\n  font-weight: bold;\n  background-color: var(--color-secondary);\n  color: var(--color-text);\n  border: none;\n  transition: transform .5s;\n  cursor: pointer;\n}\n\n.btn:hover{\n  border: 1px solid white;\n}\n\n","",{version:3,sources:["webpack://./src/assets/css/style.css"],names:[],mappings:"AAEA;EACE,mCAAmC;EACnC,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;EACtB,wBAAwB;AAC1B;;AAEA;EACE,+BAA+B;EAC/B,sCAAsC;AACxC;;AAEA,WAAW;AACX;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA,aAAa;;AAEb;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;EACb,wCAAwC;EACxC,aAAa;EACb,mBAAmB;EACnB,2CAA2C;AAC7C;;AAEA;;EAEE,gBAAgB;EAChB,WAAW;EACX,UAAU;EACV,yBAAyB;EACzB,+BAA+B;EAC/B,wCAAwC;EACxC,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,aAAa;EACb,wCAAwC;EACxC,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,sCAAsC;EACtC,cAAc;EACd,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,qBAAqB;EACrB,iBAAiB;EACjB,wCAAwC;EACxC,wBAAwB;EACxB,YAAY;EACZ,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');\n\n:root{\n  --font-family: 'Ubuntu', sans-serif;\n  --color-primary: #343541;\n  --color-secondary: #202123;\n  --color-text: #ECECF1;\n}\n\n*{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  color: var(--color-text);\n}\n\nbody, html{\n  font-family: var(--font-family);\n  background-color: var(--color-primary);\n}\n\n/* HEADER */\nheader{\n  text-align: center;\n  margin-top: 100px;\n}\n\nh1{\n  color: var(--color-text);\n  letter-spacing: 0.03em;\n  margin: 20px 0px;\n}\n\n/* CONTEUDO */\n\n.container{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 20px auto;\n  max-width: 960px;\n  height: 300px;\n  background-color: var(--color-secondary);\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.4);\n}\n\n.input_Value_Coin, \n.input_show_Coin{\n  font-size: 1.4em;\n  height: 2em;\n  width: 80%;\n  caret-color: currentColor;\n  outline: 1px solid currentColor;\n  background-color: var(--color-secondary);\n  text-align: center;\n  border: none;\n}\n\n.input_Value_Coin:focus {\n  outline: 2px solid currentColor;\n  border: none;\n}\n\n.input_show_Coin{\n  outline: none;\n  background-color: var(--color-secondary);\n  text-align: center;\n  color: currentColor;\n  border: none;\n  border: 1px solid currentColor;\n}\n\n.firstInput{\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin: 10px 0 40px 0;\n}\n\nimg {\n  margin: 0 5%;\n}\n\noption, #fromCoin, #toCoin{\n  color: currentColor;\n  height: 2.7em;\n  text-align: center;\n  background-color: var(--color-primary);\n  font-size: 1em;\n  min-width: 80px;\n  cursor: pointer;\n}\n\n.btn{\n  width: 120px;\n  height: 40px;\n  font-size: 1.4em;\n  letter-spacing: 0.1em;\n  font-weight: bold;\n  background-color: var(--color-secondary);\n  color: var(--color-text);\n  border: none;\n  transition: transform .5s;\n  cursor: pointer;\n}\n\n.btn:hover{\n  border: 1px solid white;\n}\n\n"],sourceRoot:""}]);const c=i},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},666:n=>{var t=function(n){"use strict";var t,e=Object.prototype,r=e.hasOwnProperty,o=Object.defineProperty||function(n,t,e){n[t]=e.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",c=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function u(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{u({},"")}catch(n){u=function(n,t,e){return n[t]=e}}function l(n,t,e,r){var a=t&&t.prototype instanceof m?t:m,i=Object.create(a.prototype),c=new w(r||[]);return o(i,"_invoke",{value:S(n,e,c)}),i}function A(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var p="suspendedStart",h="suspendedYield",f="executing",d="completed",C={};function m(){}function B(){}function v(){}var g={};u(g,i,(function(){return this}));var E=Object.getPrototypeOf,y=E&&E(E(P([])));y&&y!==e&&r.call(y,i)&&(g=y);var D=v.prototype=m.prototype=Object.create(g);function R(n){["next","throw","return"].forEach((function(t){u(n,t,(function(n){return this._invoke(t,n)}))}))}function b(n,t){function e(o,a,i,c){var s=A(n[o],n,a);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==typeof l&&r.call(l,"__await")?t.resolve(l.__await).then((function(n){e("next",n,i,c)}),(function(n){e("throw",n,i,c)})):t.resolve(l).then((function(n){u.value=n,i(u)}),(function(n){return e("throw",n,i,c)}))}c(s.arg)}var a;o(this,"_invoke",{value:function(n,r){function o(){return new t((function(t,o){e(n,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(n,e,r){var o=p;return function(a,i){if(o===f)throw new Error("Generator is already running");if(o===d){if("throw"===a)throw i;return{value:t,done:!0}}for(r.method=a,r.arg=i;;){var c=r.delegate;if(c){var s=x(c,r);if(s){if(s===C)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=f;var u=A(n,e,r);if("normal"===u.type){if(o=r.done?d:h,u.arg===C)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=d,r.method="throw",r.arg=u.arg)}}}function x(n,e){var r=e.method,o=n.iterator[r];if(o===t)return e.delegate=null,"throw"===r&&n.iterator.return&&(e.method="return",e.arg=t,x(n,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),C;var a=A(o,n.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,C;var i=a.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,C):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,C)}function N(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function L(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function w(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(N,this),this.reset(!0)}function P(n){if(n||""===n){var e=n[i];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,a=function e(){for(;++o<n.length;)if(r.call(n,o))return e.value=n[o],e.done=!1,e;return e.value=t,e.done=!0,e};return a.next=a}}throw new TypeError(typeof n+" is not iterable")}return B.prototype=v,o(D,"constructor",{value:v,configurable:!0}),o(v,"constructor",{value:B,configurable:!0}),B.displayName=u(v,s,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===B||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,v):(n.__proto__=v,u(n,s,"GeneratorFunction")),n.prototype=Object.create(D),n},n.awrap=function(n){return{__await:n}},R(b.prototype),u(b.prototype,c,(function(){return this})),n.AsyncIterator=b,n.async=function(t,e,r,o,a){void 0===a&&(a=Promise);var i=new b(l(t,e,r,o),a);return n.isGeneratorFunction(e)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},R(D),u(D,s,"Generator"),u(D,i,(function(){return this})),u(D,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=Object(n),e=[];for(var r in t)e.push(r);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},n.values=P,w.prototype={constructor:w,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function o(r,o){return c.type="throw",c.arg=n,e.next=r,o&&(e.method="next",e.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,C):this.complete(i)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),C},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),L(e),C}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;L(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,r){return this.delegate={iterator:P(n),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=t),C}},n}(n.exports);try{regeneratorRuntime=t}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,A="".concat(u," ").concat(l);a[u]=l+1;var p=e(A),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var f=o(h,r);r.byIndex=c,t.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=e(a[i]);t[c].references--}for(var s=r(n,o),u=0;u<a.length;u++){var l=e(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{"use strict";e(666);var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),i=e.n(a),c=e(565),s=e.n(c),u=e(216),l=e.n(u),A=e(589),p=e.n(A),h=e(122),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var d=function(){function n(n,t,e,r,o){this.firstCoin=n,this.secondCoin=t,this.inputFirstCoin=e,this.inputResult=r,this.visualManagement=o}return n.prototype.requestCoins=function(){return n=this,t=void 0,r=function(){var n,t;return function(n,t){var e,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(s){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(i=0)),i;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(n,i)}catch(n){c=[6,n],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}(this,(function(e){switch(e.label){case 0:return n="".concat(this.firstCoin.value,"-").concat(this.secondCoin.value),[4,fetch("https://economia.awesomeapi.com.br/last/".concat(n),{method:"GET",headers:{Accept:"application/json","Accept-Charset":"utf-8"}})];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),n=n.replace("-",""),[2,t[n].bid]}}))},new((e=void 0)||(e=Promise))((function(o,a){function i(n){try{s(r.next(n))}catch(n){a(n)}}function c(n){try{s(r.throw(n))}catch(n){a(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(i,c)}s((r=r.apply(n,t||[])).next())}));var n,t,e,r},n.prototype.conversor=function(n){return+this.inputFirstCoin.value*Number(n)},n}(),C={AED:"Dirham dos Emirados",AFN:"Afghani do Afeganistão",ALL:"Lek Albanês",AMD:"Dram Armênio",ANG:"Guilder das Antilhas",AOA:"Kwanza Angolano",ARS:"Peso Argentino",AUD:"Dólar Australiano",AZN:"Manat Azeri",BAM:"Marco Conversível",BBD:"Dólar de Barbados",BDT:"Taka de Bangladesh",BGN:"Lev Búlgaro",BHD:"Dinar do Bahrein",BIF:"Franco Burundinense",BND:"Dólar de Brunei",BOB:"Boliviano",BRL:"Real Brasileiro",BSD:"Dólar das Bahamas",BTC:"Bitcoin",BWP:"Pula de Botswana",BYN:"Rublo Bielorrusso",BZD:"Dólar de Belize",CAD:"Dólar Canadense",CHF:"Franco Suíço",CHFRTS:"Franco Suíço",CLP:"Peso Chileno",CNH:"Yuan chinês offshore",CNY:"Yuan Chinês",COP:"Peso Colombiano",CRC:"Colón Costarriquenho",CUP:"Peso Cubano",CVE:"Escudo cabo-verdiano",CZK:"Coroa Checa",DJF:"Franco do Djubouti",DKK:"Coroa Dinamarquesa",DOGE:"Dogecoin",DOP:"Peso Dominicano",DZD:"Dinar Argelino",EGP:"Libra Egípcia",ETB:"Birr Etíope",ETH:"Ethereum",EUR:"Euro",FJD:"Dólar de Fiji",GBP:"Libra Esterlina",GEL:"Lari Georgiano",GHS:"Cedi Ganês",GMD:"Dalasi da Gâmbia",GNF:"Franco de Guiné",GTQ:"Quetzal Guatemalteco",HKD:"Dólar de Hong Kong",HNL:"Lempira Hondurenha",HRK:"Kuna Croata",HTG:"Gourde Haitiano",HUF:"Florim Húngaro",IDR:"Rupia Indonésia",ILS:"Novo Shekel Israelense",INR:"Rúpia Indiana",IQD:"Dinar Iraquiano",IRR:"Rial Iraniano",ISK:"Coroa Islandesa",JMD:"Dólar Jamaicano",JOD:"Dinar Jordaniano",JPY:"Iene Japonês",JPYRS:"Iene Japonês",KES:"Shilling Queniano",KGS:"Som Quirguistanês",KHR:"Riel Cambojano",KMF:"Franco Comorense",KRW:"Won Sul-Coreano",KWD:"Dinar Kuwaitiano",KYD:"Dólar das Ilhas Cayman",KZT:"Tengue Cazaquistanês",LAK:"Kip Laosiano",LBP:"Libra Libanesa",LKR:"Rúpia de Sri Lanka",LSL:"Loti do Lesoto",LTC:"Litecoin",LYD:"Dinar Líbio",MAD:"Dirham Marroquino",MDL:"Leu Moldavo",MGA:"Ariary Madagascarense",MKD:"Denar Macedônio",MMK:"Kyat de Mianmar",MNT:"Mongolian Tugrik",MOP:"Pataca de Macau",MRO:"Ouguiya Mauritana",MUR:"Rúpia Mauriciana",MVR:"Rufiyaa Maldiva",MWK:"Kwacha Malauiana",MXN:"Peso Mexicano",MYR:"Ringgit Malaio",MZN:"Metical de Moçambique",NAD:"Dólar Namíbio",NGN:"Naira Nigeriana",NIO:"Córdoba Nicaraguense",NOK:"Coroa Norueguesa",NPR:"Rúpia Nepalesa",NZD:"Dólar Neozelandês",OMR:"Rial Omanense",PAB:"Balboa Panamenho",PEN:"Sol do Peru",PGK:"Kina Papua-Nova Guiné",PHP:"Peso Filipino",PKR:"Rúpia Paquistanesa",PLN:"Zlóti Polonês",PYG:"Guarani Paraguaio",QAR:"Rial Catarense",RON:"Leu Romeno",RSD:"Dinar Sérvio",RUB:"Rublo Russo",RWF:"Franco Ruandês",SAR:"Riyal Saudita",SCR:"Rúpias de Seicheles",SDG:"Libra Sudanesa",SDR:"DSE",SEK:"Coroa Sueca",SGD:"Dólar de Cingapura",SOS:"Shilling Somaliano",STD:"Dobra São Tomé/Príncipe",SVC:"Colon de El Salvador",SYP:"Libra Síria",SZL:"Lilangeni Suazilandês",THB:"Baht Tailandês",TJS:"Somoni do Tajiquistão",TMT:"TMT",TND:"Dinar Tunisiano",TRY:"Nova Lira Turca",TTD:"Dólar de Trinidad",TWD:"Dólar Taiuanês",TZS:"Shilling Tanzaniano",UAH:"Hryvinia Ucraniana",UGX:"Shilling Ugandês",USD:"Dólar Americano",UYU:"Peso Uruguaio",UZS:"Som Uzbequistanês",VEF:"Bolívar Venezuelano",VND:"Dong Vietnamita",VUV:"Vatu de Vanuatu",XAF:"Franco CFA Central",XBR:"Brent Spot",XCD:"Dólar do Caribe Oriental",XOF:"Franco CFA Ocidental",XPF:"Franco CFP",XRP:"XRP",YER:"Riyal Iemenita",ZAR:"Rand Sul-Africano",ZMK:"Kwacha Zambiana",ZWL:"Dólar Zimbabuense",RUBTOD:"Rublo Russo",RUBTOM:"Rublo Russo",XAGGX:"Prata",USDT:"Dólar Tether"},m={USD:["BRL","AOA","JPY","CHF","CAD","ZAR","TRY","MXN","PLN","SEK","SGD","DKK","NOK","ILS","HUF","CZK","THB","AED","JOD","KWD","HKD","SAR","INR","KRW","ALL","AMD","ANG","ARS","AUD","BBD","BDT","BGN","BHD","BIF","BND","BOB","BSD","BWP","BZD","CLP","CNY","COP","CRC","CUP","DJF","DOP","DZD","EGP","ETB","EUR","FJD","GBP","GEL","GHS","GMD","GNF","GTQ","HNL","HRK","HTG","IDR","IQD","IRR","ISK","JMD","KES","KHR","KMF","KZT","LAK","LBP","LKR","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MOP","MRO","MUR","MVR","MWK","MYR","NAD","NGN","NIO","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PYG","QAR","RON","RSD","RWF","SCR","SDG","SOS","STD","SVC","SYP","SZL","TND","TTD","TMT","TWD","TZS","UAH","UGX","UYU","UZS","VEF","VND","VUV","XAF","XCD","XOF","XPF","YER","ZMK","AZN","CNH","KGS","TJS","RUB","BYN","MZN","NGNI","ZWL"],EUR:["BRL","USD","GBP","JPY","CHF","AUD","CAD","NOK","DKK","PLN","NZD","SEK","ILS","TRY","THB","ZAR","MXN","SGD","HUF","HKD","CZK","KRW","AED","AFN","ALL","ANG","ARS","BAM","BBD","BDT","BGN","BHD","BIF","BND","BOB","BSD","BWP","BYN","BZD","CLP","CNY","COP","CRC","CUP","CVE","DJF","DOP","DZD","EGP","ETB","FJD","GHS","GMD","GNF","GEL","GTQ","HNL","HRK","HTG","IDR","INR","IQD","IRR","ISK","JMD","JOD","KES","KHR","KWD","KYD","KZT","LAK","LBP","LKR","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MOP","MRO","MUR","MWK","MYR","NAD","NGN","NIO","NPR","OMR","PAB","PEN","PGK","PHP","PKR","PYG","QAR","RON","RSD","RWF","SAR","SCR","SDG","SDR","SOS","STD","SVC","SYP","SZL","TND","TTD","TWD","TZS","UAH","UGX","UYU","UZS","VEF","VND","XAF","XOF","XPF","ZMK","XCD","MZN","AZN","AMD","TJS","RUB","AOA","MNT","AFN"],BRL:["USD","EUR","ARS","AUD","CAD","CHF","CLP","DKK","HKD","JPY","MXN","SGD","AED","BBD","BHD","CNY","CZK","EGP","GBP","HUF","IDR","ILS","INR","ISK","JMD","JOD","KES","KRW","LBP","LKR","MAD","MYR","NAD","NOK","NPR","NZD","OMR","PAB","PHP","PKR","PLN","QAR","RON","RUB","SAR","SEK","THB","TRY","VEF","XAF","XCD","XOF","ZAR","TWD","UYU","COP","PEN","PYG","BOB"],GBP:["BRL","EUR","USD"],ARS:["BRL","USD","EUR"],JPY:["BRL","USD","EUR"],CNY:["BRL","USD","EUR"],BTC:["BRL","USD","EUR"],ETH:["BRL","EUR","USD"],LTC:["BRL","EUR","USD"],DOGE:["BRL","EUR","USD"],XRP:["BRL","EUR","USD"]},B=function(){function n(n,t,e,r){this.selectFirstCoin=n,this.inputCoinFrom=t,this.inputResult=e,this.selectSecondCoin=r,this.listAllCoins()}return n.prototype.listAllCoins=function(){for(var n in m)for(var t in C)n==t&&this.createOption(n,this.selectFirstCoin,C[t])},n.prototype.createOption=function(n,t,e){var r=document.createElement("option");r.setAttribute("value","".concat(n)),r.textContent="".concat(n," "),t.appendChild(r)},n.prototype.showNameCoin=function(n,t){return n?t?this.inputResult.setAttribute("placeholder","".concat(C[n])):this.inputCoinFrom.setAttribute("placeholder","".concat(C[n])):this.inputCoinFrom.setAttribute("placeholder","")},n.prototype.searchPairs=function(n){if(this.selectSecondCoin.innerHTML="",!n)return this.errorNoValues();for(var t=0,e=m[n];t<e.length;t++){var r=e[t];for(var o in C)r==o&&this.createOption(r,this.selectSecondCoin,C[o])}},n.prototype.showResult=function(n){var t=Number(n).toLocaleString("pt-br",{style:"currency",currency:this.selectSecondCoin.value});this.inputResult.value=t},n.prototype.searchDataBase=function(n){for(var t in C)if(t===n)return C[n]},n.prototype.errorNoValues=function(){this.inputResult.value="",this.inputResult.setAttribute("placeholder","Preencha os campos")},n}(),v=document.querySelector(".btn"),g=document.querySelector("#fromCoin"),E=document.querySelector("#toCoin"),y=document.querySelector(".input_Value_Coin"),D=document.querySelector(".input_show_Coin"),R=new B(g,y,D,E),b=new d(g,E,y,D,R);v.onclick=function(){if(""===g.value||""===E.value||""===y.value)return R.errorNoValues();b.requestCoins().then((function(n){var t=b.conversor(n);R.showResult(t.toFixed(2))}))},g.onblur=function(){R.showNameCoin(g.value),R.searchPairs(g.value)},E.onchange=function(n){D.value="",R.showNameCoin(n.target.value,!0)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,